Search Insert Position

class Solution {
    public int searchInsert(int[] nums, int target) { 
    int low = 0;
    int high = nums.length - 1;

    while (low <= high) {
      int mid = low + (high - low) / 2;

      if (nums[mid] == target) {
        return mid;
      } else if (nums[mid] > target) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }

    return low;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Find Peak Element

class Solution {
    public int findPeakElement(int[] nums) {
       if(nums.length == 1) return 0; // single element
        
        int n = nums.length;
        
		// check if 0th/n-1th index is the peak element
        if(nums[0] > nums[1]) return 0;
        if(nums[n-1] > nums[n-2]) return n-1;
		
		// search in the remaining array
        int start = 1;
        int end = n-2;
        
        while(start <= end) {
            int mid = start + (end - start)/2;
            if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) return mid;
            else if(nums[mid] < nums[mid-1]) end = mid - 1;
            else if(nums[mid] < nums[mid+1]) start = mid + 1;
        }
        return -1; 
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Search in Rotated Sorted Array
class Solution {
    public int search(int[] arr, int target) {
        if(arr.length==0) {
		return-1;
	}
	int low = 0,high=arr.length-1;
    while(low<=high){
        int mid=low+(high-low)/2;

        if(arr[mid]==target){
            return mid;
        }

        if(arr[low]<=arr[mid]){
            if(target>=arr[low] && target<arr[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }else{
            if(target>arr[mid] && target<=arr[high]){
                 low=mid+1;;
            }else{
                high=mid-1;
            }
        }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
  int left = 0;
            int right = matrix[0].length - 1;
            int m= matrix.length ;
            int n= matrix[0].length ;
            while(left>=0 && left<m && right>=0 && right<n){
                if(matrix[left][right]==target){
                    return true;
                }else if(matrix[left][right]>target){
                    right--;
                }else if(matrix[left][right]<target){
                    left++;
                }
            }
            return false;
    }
} 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 5.Median of Two Sorted Arrays

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
         int n1 = nums1.length;
        int n2 = nums2.length;
        int n = n1 + n2;
        int[] new_arr = new int[n];

        int i=0, j=0, k=0;

        while (i<=n1 && j<=n2) {
            if (i == n1) {
                while(j<n2) new_arr[k++] = nums2[j++];
                break;
            } else if (j == n2) {
                while (i<n1) new_arr[k++] = nums1[i++];
                break;
            }

            if (nums1[i] < nums2[j]) {
                new_arr[k++] = nums1[i++];
            } else {
                new_arr[k++] = nums2[j++];
            }
        }

        if (n%2==0) return (float)(new_arr[n/2-1] + new_arr[n/2])/2;
        else return new_arr[n/2];
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Number of occurrence
class Solution {
   public int binarySearch(int[] arr,int low, int high, int x){
        if (high< low)
            return -1;
        int mid = low+(high-low)/2;
        
        if(arr[mid]==x){
            return mid;
        }
       
        if(arr[mid]>x){
            return binarySearch(arr,low,mid-1,x);
        } 
        
        return binarySearch(arr,mid+1,high,x);
    }
    int count(int[] arr, int n, int x) {
       int mid = binarySearch(arr,0,n-1,x);
       int count =1;
         if (mid == -1)
            return 0;
       int left = mid-1;
       while(left>=0 && arr[left]==x){
           count++;
           left--;
       }
       int right = mid+1;
       while(right<n && arr[right]==x){
           count++;
           right++;
       }
       return count;
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Floor in a Sorted Array
    static int findFloor(long arr[], int n, long x)
    {
        int l = 0;
        int r = n-1;
        long res=-1;
           
        while(l<=r){
         
            int mid = l+(r-l)/2;
            
            if(arr[mid]==mid){
                res =  arr[mid];
            }
            
            if(x>arr[mid]){
                res=arr[mid];
                l = mid + 1;
            }
            else if(arr[mid]>x){
                r=mid-1;
            }
        }
        return (int)res;
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
